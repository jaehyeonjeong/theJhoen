예외 처리 기본 원칙
1. 구체적인 예외를 잡아야 한다.
-> 이는 예외의 원인을 명확히 파악하고 적절한 처리를 할 수 있다.

2. 예외를 무시하지 않아야 한다.
-> 예외가 발생했을 때 적절한 처리를 하지 않고 넘어가면 프로그램의 안정성이 저하된다.

3. 예외를 남발하지 않아야 한다.
-> 예외는 정말 예외적인 상황에서만 사용해야 한다. 예외 처리는 비용이 많이 드는 작업이다.

4. 예외 메시지는 가능한 한 유용하게 작성해야 한다.
-> 예외 메시지에는 원인과 해결 방법에 대한 정보가 포함되어야 한다.


예외 처리 전략
1. 예외를 로깅해야 한다.
-> 예외가 발생했을 때 로그를 남기면 문제의 원인을 파악하고 해결하는데 도움이 된다.

2. 커스텀 예외 클래스를 사용한다.
-> 비즈니스 로직에 맞는 커스텀 에외를 작성하면 예외의 의미를 명확히 알 수 있다.

3. 어플리케이션 전역헤서 예외를 처리할 수 있도록 @ControllerAdvice와 @ExceptionHandler를 활용한다.

4. 예외 발생 시 적절한 수준(ERROR, WARN, INFO)으로 로깅하여 문제를 추적 가능하게 한다.

5. 예외 발생 상황에 대한 모니터링과 알림 설정을 한다.

6. 예외 처리시 불필요한 try-catch를 줄이고, 가능한 한 높은 계층에서 Exception을 처리한다.
더불어 적절한 HTTP상태 코드를 반환하여 클라이언트가 응답을 이해할 수 있게 한다.
또한 민감한 정보 ex) PW, API키 등은 예외 메시지에 포함하지 않는다.

