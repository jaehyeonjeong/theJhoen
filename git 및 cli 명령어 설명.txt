git 은  vcs의 한 종류 프로그래머가 기본으로 알아야 함.
github -> git으로 모아둔 클라우드 (대표적)

vcs -> version control system

1. 보고서 초안
2. 보고서 1-1 버전 표시
3. 보고서 1.1.1, 1.1.2
4. 보고서 2. 버전으로 쭉쭉 내려간거

프로그래머는 주로 텍스트를 많이 사용
1.html 박제 => snap shot 
2.내용 추가(박제된걸 두고두고 씀)
3. 만들기 전에 해야하는 일 -> 글로벌 세팅

cli-> 직접 명령어를 작성해서 실행

gui(소스트리)->마우스 클릭

git을 사용할 떄에는 git-bash를 사용

git config --global user.name "jjh0306"
git config --global user.email "아무이메일"

git init을 시켜줘야함.

git add . 을 하면 폴더안의 모든 파일을 스테이징 한다.
staging : 박제

git log : 로그 내역
git log --online : 간단한 로그 내역
git checkout eea6a73(위치 시킬 헤드 이동)
git checkout master(마스터 브랜치로 이동)

git status : 상태, 추적이 안되는 파일이 있다. 만약 꺠끗한 상태이면 모두 commit했다는 뜻이 된다.
새로운 파일이나 기존의 파일 내용을 수정하고 commit이 안되면 추적을 할 수 있다.

git commit --amend : 커밋의 내용을 수정하는 명령어

vim 에디터 화면
esc + :q 수정안한 상태에서 그냥 빠져나가기
esc + :wq 저장하고 빠져나가기
esc + :q! 수정된 채로 강제로 빠져나가기 그러면 내용은 저장이 안됨

git commit --amend -m "editor modify"
일반 commit --amend 와는 달리 vim을 들어가지 않고 직접 커밋 메시지를 저장

git switch --detach
git switch master 를 하면 git checkout과 같은 기능을 할 수 있다.

switch 또는 checkout을 쓰는데 최근에는 switch를 많이 쓴다.
reset이라는게 있다.


github의 repository를 만들고 그 안에 코드를 push하는데 있어 github의 계정이 오래되면 옛날 방식으로 사용할 수 있다.

git merge --ff-only origin/master : 여기서 ff는 패스트 포워드의 약자

pull(merge 까지 같이 해준다) / fetch (merge는 안하고 merge해야할 내역을 알려준다.)

다른 방법
git merge origin/master : origin/master로 병합을 할 수 있다.

유의사항으로는 git fetch를 하고 fetch 내역이 아무것도 없으면 여백을 출력한다.

git branch는 현재 가지고 있는 브랜치 명을 출력한다.
$ git branch feature
$ git branch
  feature
* master -> 현재 작업 브랜치

git branch -r 원격에 있는 브랜치들을 확인한다.

git merge feature : fast foward 방법

hotfix 브랜치를 만들고 file을 만든 다음 master에 병합하고 github에 올리기

git push origin master : 원격으로 push를 하는 경우에는 git push 까지는 같으나  origin master/feature 처럼 구문을 지켜주어야함.
그리고 원격을 push 하기 전에는 반드시 로컬 브랜치로 병합하는게 좋다.

터미널을 하면 좋은점은 가시성은 떨어지지만 갖가지 명령어들을 알면 컨트롤하기 용이하고 강력한 명령어가 내포되어있다.


