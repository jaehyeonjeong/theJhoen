-- DML은 커밋이 있다.
CREATE TABLE emp_temp AS SELECT * FROM emp; -- 테이블 복사
INSERT INTO emp_temp 
(empno, ename, job, mgr, hiredate, sal, comm, deptno)
VALUES (2222, '정재현', NULL, NULL, to_date('2025/09/28', 'YYYY/MM/DD'), 2500, 400, 10);

INSERT INTO emp_temp 
(empno, ename, job, mgr, hiredate, sal, comm, deptno)
VALUES (3333, '정다현', NULL, NULL, sysdate, 2500, 400, 10);
SELECT * FROM emp_temp;

--update
CREATE TABLE dept_temp02
AS SELECT * FROM dept;

SELECT * FROM dept_temp02;
-- 수정할때 update 반드시 조건을 달아서 수정을 해야한다.
-- insert, update, delete를 하는 경우 기존 transaction 처리할 때 사용한다.
-- TCL(Transaction Commit Language, ROLLBACK, COMMIT);
UPDATE dept_temp02 SET loc = '천안';
COMMIT;			-- commit을 사용하면 rollback해도 commit한 이후의 데이터는 변경되지 않는다.
ROLLBACK;

-- auto commit 

-- book quiz
CREATE TABLE chap10_emp AS SELECT * FROM emp;
CREATE TABLE chap10_dept AS SELECT * FROM dept;
CREATE TABLE chap10_salgrade AS SELECT * FROM salgrade;


INSERT INTO chap10_dept (deptno, dname, loc)
VALUES (50, 'ORACLE', 'BUSAN');

INSERT INTO chap10_dept (deptno, dname, loc)
VALUES (60, 'SQL', 'ILSAN');

INSERT INTO chap10_dept (deptno, dname, loc)
VALUES (70, 'SELECT', 'INCHEON');

INSERT INTO chap10_dept (deptno, dname, loc)
VALUES (80, 'DML', 'BUNDANG');

SELECT * FROM CHAP10_DEPT;

--2.
SELECT * FROM CHAP10_EMP;

INSERT INTO CHAP10_EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
VALUES(7201, 'TEST_USER1', 'MANAGER', 7788, TO_DATE('16/01/02', 'YY/MM/DD'), 4500, NULL, 50);

INSERT INTO CHAP10_EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
VALUES(7201, 'TEST_USER2', 'CLERK', 7201, TO_DATE('16/02/21', 'YY/MM/DD'), 1800, NULL, 50);

INSERT INTO CHAP10_EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
VALUES(7201, 'TEST_USER3', 'ANALYST', 7201, TO_DATE('16/04/11', 'YY/MM/DD'), 3400, NULL, 60);

INSERT INTO CHAP10_EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
VALUES(7201, 'TEST_USER4', 'SALESMAN', 7201, TO_DATE('16/05/31', 'YY/MM/DD'), 2700, NULL, 60);

INSERT INTO CHAP10_EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
VALUES(7201, 'TEST_USER5', 'CLERK', 7201, TO_DATE('16/07/20', 'YY/MM/DD'), 2600, NULL, 70);

INSERT INTO CHAP10_EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
VALUES(7201, 'TEST_USER6', 'CLERK', 7201, TO_DATE('16/09/08', 'YY/MM/DD'), 2600, NULL, 70);

INSERT INTO CHAP10_EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
VALUES(7201, 'TEST_USER7', 'LECTURER', 7201, TO_DATE('16/10/28', 'YY/MM/DD'), 2300, NULL, 80);

INSERT INTO CHAP10_EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
VALUES(7201, 'TEST_USER1', 'STUDENT', 7201, TO_DATE('16/03/09', 'YY/MM/DD'), 1200, NULL, 80);

INSERT INTO CHAP10_EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
VALUES (7201, 'TEST_USER100', 'STUDENT', 7201, TO_DATE('16/03/09', 'YY/MM/DD'), 1200, NULL, 80);

SELECT * FROM CHAP10_EMP;


---3. 50번 부서에서근무하는 사원의 평균급여
SELECT AVG(SAL) FROM CHAP10_EMP WHERE DEPTNO = 50;

UPDATE CHAP10_EMP
	SET DEPTNO = 70
WHERE SAL > (SELECT AVG(SAL) FROM CHAP10_EMP WHERE DEPTNO = 50);
COMMIT;
ROLLBACK;


--4. UPDATE
UPDATE CHAP10_EMP SET SAL = SAL * 1.1, DEPTNO = 80
WHERE HIREDATE > (SELECT MIN(HIREDATE) FROM CHAP10_EMP WHERE DEPTNO = 60);


SELECT * FROM CHAP10_EMP WHERE DEPTNO = 70;
SELECT * FROM CHAP10_EMP WHERE DEPTNO = 50;
SELECT * FROM CHAP10_EMP WHERE DEPTNO = 80;

--5. 급여 등급이 5인 사원
DELETE FROM CHAP10_EMP WHERE EMPNO IN (
	SELECT E.EMPNO FROM CHAP10_EMP E
	JOIN CHAP10_SALGRADE S ON E.SAL BETWEEN S.LOSAL AND S.HISAL
	WHERE S.GRADE = 5
);

SELECT * FROM CHAP10_EMP;
SELECT * FROM CHAP10_SALGRADE;

-- COMMITM ROLLBACK 중요성

-- 다른 데이터 파일로 불러오는 경우 COMMIT이 안되어있으면 수정하기 전의
-- 데이터 정보를 출력하기 때문 
CREATE TABLE DEPT_TCL AS SELECT * FROM DEPT ;
SELECT * FROM DEPT_TCL;

INSERT INTO DEPT_TCL (DEPTNO, DNAME, LOC)
VALUES (50, 'DB', 'SEOUL');

UPDATE DEPT_TCL SET LOC = 'BUSAN' WHERE DEPTNO = 40;
DELETE FROM DEPT_TCL WHERE DNAME = 'RESEARCH';
DELETE FROM DEPT_TCL WHERE DEPTNO = 50;

COMMIT;
ROLLBACK; -- TRANSACTION은 일의 묶음 ㄴ단위(입금 / 출금) COMMIT / ROLLBACK
-- LOCK 잠그시
UPDATE DEPT_TCL SET LOC = 'BUSAN' WHERE DEPTNO = 30;
SELECT * FROM DEPT_TCL;

-- DB에 접속을 한 특정 SESSION(연결된 계정)에서 
-- INSERT, UPDATE, DELETE를 수행할 떄 LOCK을 걸어둔다.
-- 이러면 다른 SESSION에서는 INSERT, UPDATE, DELETE는
-- 수행되지 않는다.
-- 반드시 COMMIT; ROLLBACK을 해야지만 다흔 세션에서의
-- INSERT, UPDATE, DELETE가 수행된다.

-- 새로만든 DBEAVER에서도 MANUAL_COMMIT으로 전환해야함.

INSERT INTO DEPT_TCL 
VALUES (50, 'WEB', 'SEOUL');

COMMIT;


-- JAVA에서 AUTO COMMIT을 ON/OFF 설정할 수 있음.

-- TABLE 만들기 DDL CREATE 생성, DROP 지우기, ALTER 변경
-- CREATE TABLE 테이블 이름 (
	--- 칼럼명 자료형,
--- 칼럼명 자료형,
--- 칼럼명 자료형,
--- 칼럼명 자료형,
--- )
DROP TABLE EMP_DDL;

-- 
CREATE TABLE EMP_DDL (
	EMPNO NUMBER(4),
	ENAME VARCHAR2(100),
	JOB VARCHAR2(100),
	MGR NUMBER(4),
	HIREDATE DATE,
	SAL NUMBER(7, 2),
	COMM NUMBER(7, 2),
	DEPTNO NUMBER(2)
);

--- 한글은 3바이트이기 때문에 타입의 사이즈를 미리 넉넉히 할 필요가 있다.
INSERT INTO EMP_DDL(EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
VALUES (1000, '정재현', '영업사원', 2000, TO_DATE('2025-09-25', 'YYYY-MM-DD'), 3000, 1000, 20);


CREATE TABLE EMP_DDL_30
AS SELECT * FROM EMP WHERE DEPTNO = 30;

SELECT * FROM EMP_DDL_30;

DROP TABLE EMP_DEPT_DDL;

CREATE TABLE EMP_DEPT_DDL
AS 
	SELECT 	E.EMPNO, 
			E.ENAME, 
			E.JOB, 
			E.HIREDATE, 
			E.SAL, 
			E.COMM, 
			D.DEPTNO, 
			D.DNAME
FROM EMP E JOIN DEPT D ON D.DEPTNO = E.DEPTNO
WHERE 1 = 0;		--- 복사해서 테이블 틀만 만들 경우 "WHERE 1 = 0"으로 작성해야한다.

SELECT * FROM EMP_DEPT_DDL;

DROP TABLE BOARD;
-- VARCHAR2는 4000자 까지만 작성이 가능하다.
-- LONG : 2GB 텍스트 용량 차지, 단 LONG 타입은 테이블당 하나만 저장할 수 밖에 없다.
-- 2기가보다 더 큰 타입 -> CLOB : CHARACTER LARGE OBJECT 4 ~ 128TB = 문자만 저장
-- BLOB도 있음 BINARY LARGE OBJECT : 이미지나 영상 파일등을 저장(RAW DATA, 4 ~ 128TB)
-- BASE64 인코딩 이미지를 텍스트로 바꿔서 저장하는 방법
CREATE TABLE BOARD ( 
	SUBJECT VARCHAR2(100),
	CONTENT LONG,
	CONTENT_CLOB CLOB,		-- 이미지 자체가 텍스트로 들어갔기 떄문에 이미지 자체를 요구하지 않는다.
	CONTENT_BLOB BLOB,		-- DB에다가는 파일을 전달 받아서 다른곳에 저장에 옮겨서 저장을 하고, 그이미지의 경로를 저장해둔다.
	FILE_NAME VARCHAR2(1000) ----XXX.JPG
)

CREATE TABLE BOARD ( 
	SUBJECT VARCHAR2(100),
	CONTENT LONG,
	CONTENT_CLOB LONG
)

COMMIT;

-- NUMBER(P, S) :PRECISION, SCALAR
CREATE TABLE NUMBERS (
	NUM01 NUMBER,
	NUM02 NUMBER(3),
	NUM03 NUMBER(3, 2),	-- 소수점은 2자리 까지, 전체 길이는 3자리 반드시 소수점 2자리까지 확보되어야 한다.
	NUM04 NUMBER(5, 2),
	NUM05 NUMBER(7, 1),
	NUM06 NUMBER(7, -1),
	NUM07 NUMBER(4, 5),	-- 자리수를 맞춰야한다, 유효숫자는 4개 ㄴㅇ
	NUM08 NUMBER(4, 5), -- P보다 S가 크면 정수가 올 수 없다.못 쓴다. 소수의 자릿수를 맞춰서 작성해주면 된다.
	NUM09 NUMBER(4, 7),
	NUM10 NUMBER(4, 6)
);

INSERT INTO NUMBERS (NUM01) VALUES (10000000000000000000000000000000);

INSERT INTO NUMBERS (NUM02) VALUES (100);
INSERT INTO NUMBERS (NUM02) VALUES (100.50); -- 정수만 들어갈 수 있는데 소수점이 있으면 반올림이 된다.
INSERT INTO NUMBERS (NUM03) VALUES (2.12);
INSERT INTO NUMBERS (NUM04) VALUES (999.5);
INSERT INTO NUMBERS (NUM05) VALUES (1234.55);
INSERT INTO NUMBERS (NUM06) VALUES (123.74); 	-- -1이기 때문에 1의 자리의 수가 버려진다.
INSERT INTO NUMBERS (NUM06) VALUES (128.74); 	-- -1이기 때문에 1의 자리의 수가 버려진다.(반올림 할 경우 십의 자리를 올려주고 이하의 수들은 지워짐)
INSERT INTO NUMBERS (NUM07) VALUES (0.00444444444);	-- 소수점 이하 5자리까지 유효
INSERT INTO NUMBERS (NUM09) VALUES (0.0001234567);	-- 소수점 이하 5자리까지 유효
INSERT INTO NUMBERS (NUM10) VALUES (0.001234567);
INSERT INTO NUMBERS (NUM10) VALUES (0.01234567);

SELECT * FROM NUMBERS;

DROP TABLE NUMBERS;
COMMIT;



--- ALTER는 바꾸기 --- DDL은 커밋이 없다.
CREATE TABLE EMP_ALTER
AS SELECT * FROM EMP;
SELECT * FROM EMP_ALTER;

-- ALTER로 할 수 있는 것 : ADD(컬럼 추가), RENAME(컬럼이름변경), MODIFY(데이터 타입 변경), 
ALTER TABLE EMP_ALTER		
ADD HP VARCHAR2(20);			-- 헤더 컬럼 추가

ALTER TABLE EMP_ALTER
RENAME COLUMN HP TO TEL;		-- 헤더 컬럼 이름 변경

ALTER TABLE EMP_ALTER
MODIFY EMPNO NUMBER(6);		--- 작은거에서 큰거로는 변경가능한데 큰거에서 작은거로는 변경을 유의해야한다. 

ALTER TABLE EMP_ALTER
DROP COLUMN TEL;			-- 다른 테이블과 연관되어 있으면 유의해야 한다.
ROLLBACK;
SELECT * FROM EMP_ALTER;	

--- 테이블의 이름을 바꾸기
RENAME EMP_ALTER TO EMP_RENAME;
SELECT * FROM EMP_RENAME;
TRUNCATE TABLE EMP_RENAME; -- 데이터 삭제, 주의할 점은 TRANSACTION이 없다.
DELETE FROM EMP_RENAME; -- ROLL BACK이 가능하다.
--- 테이블 자체를 업애는 것은 DROP;
DROP TABLE IF EXISTS EMP_RENAME; -- 오라클에는 없음 
COMMIT;

-- BOOK QUIZ P.300
--- 1.
CREATE TABLE EMP_HW (
	EMPNO 		NUMBER(4),
	ENAME 		VARCHAR2(10),
	JOB 		VARCHAR2(9),
	MGR 		NUMBER(4),
	HIREDATE 	DATE,
	SAL 		NUMBER(7, 2), 
	COMM 		NUMBER(7, 2),
	DEPTNO 		NUMBER(2)
)

-- 2. BIGO 추가
ALTER TABLE EMP_HW
ADD BIGO VARCHAR2(20);


-- 3. BIGO DATATYPE 수정 (열 크기를 20 -> 30)
ALTER TABLE EMP_HW
MODIFY BIGO VARCHAR2(30);


-- 4. BIGO 컬럼명을 REMARK로 수정
ALTER TABLE EMP_HW
RENAME COLUMN BIGO TO REMARK ;

DROP TABLE EMP_HW;

--- 5.DROP을 하지 않고 데이터를 추가하는 방법
INSERT INTO EMP_HW (SELECT EMPNO, ENAME,JOB, MGR, HIREDATE, SAL, COMM, DEPTNO, NULL FROM EMP);

CREATE TABLE EMP_HW
AS SELECT * FROM EMP;
-- 기존에 만들어진 테일블에서 데이터를 저장하는 방법?

ALTER TABLE EMP_HW
ADD REMARK VARCHAR2(30);

SELECT * FROM EMP_HW;

DROP TABLE EMP_HW;
DELETE EMP_HW WHERE DEPTNO = 30;
ROLLBACK;
COMMIT;




